model Address {
  id                  String   @id @default(uuid()) @db.Uuid
  user_id             String?  @db.Uuid
  first_name          String
  last_name           String
  email               String
  phone               String?
  address_line1       String
  address_line2       String
  city                String
  state               String
  country             String
  is_default_shipping Boolean
  is_default_billing  Boolean
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  user                User?    @relation(fields: [user_id], references: [id])

  shipping_orders Orders[] @relation("ShippingAddress")
  billing_orders  Orders[] @relation("BillingAddress")
}
enum Status {
  ACTIVE
  ABANDONED
  CONVERTED
}

model Carts {
  id         String      @id @default(uuid()) @db.Uuid
  user_id    String?     @db.Uuid
  session_id String      @db.Uuid
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  status     Status
  user       User?       @relation(fields: [user_id], references: [id])
  session    Session     @relation(fields: [session_id], references: [id])
  cart_items CartItems[]
  orders     Orders[]
}

model CartItems {
  id                 String          @id @default(uuid()) @db.Uuid
  cart_id            String          @db.Uuid
  product_variant_id String          @db.Uuid
  product_variant    ProductVariants @relation(fields: [product_variant_id], references: [id])
  carts              Carts           @relation(fields: [cart_id], references: [id])
  quantity           Int

  @@unique([cart_id, product_variant_id])
}

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Orders {
  id                  String        @id @default(uuid()) @db.Uuid
  user_id             String?       @db.Uuid
  cart_id             String        @db.Uuid
  order_number        String        @unique
  status              OrderStatus
  total_amount        Decimal
  shipping_amount     Decimal
  tax_amount          Decimal
  discount_amount     Decimal
  shipping_address_id String        @db.Uuid
  billing_address_id  String        @db.Uuid
  payment_status      PaymentStatus
  payment_method      String
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  shipping_address    Address       @relation("ShippingAddress", fields: [shipping_address_id], references: [id])
  billing_address     Address       @relation("BillingAddress", fields: [billing_address_id], references: [id])
  carts               Carts         @relation(fields: [cart_id], references: [id])
  user                User?         @relation(fields: [user_id], references: [id])
  order_items         OrderItems[]
}

model OrderItems {
  id                 String          @id @default(uuid()) @db.Uuid
  order_id           String          @db.Uuid
  product_variant_id String          @db.Uuid
  quantity           Int
  unit_price         Decimal
  total_price        Decimal
  created_at         DateTime        @default(now())
  product_variant    ProductVariants @relation(fields: [product_variant_id], references: [id])
  orders             Orders          @relation(fields: [order_id], references: [id])

  @@unique([order_id, product_variant_id])
}

model Products {
  id                 String            @id @default(uuid()) @db.Uuid
  name               String
  slug               String            @unique
  description        String            @db.Text
  price              Decimal
  inventory_quantity Int
  is_available       Boolean
  category_id        String            @db.Uuid
  category           Category          @relation(fields: [category_id], references: [id])
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  product_images     ProductImages[]
  product_variant    ProductVariants[]
}

model ProductImages {
  id            String   @id @default(uuid()) @db.Uuid
  product_id    String   @db.Uuid
  url           String
  is_primary    Boolean
  display_order Int      @default(0)
  created_at    DateTime @default(now())
  product       Products @relation(fields: [product_id], references: [id])
}

model ProductVariants {
  id                 String       @id @default(uuid()) @db.Uuid
  product_id         String       @db.Uuid
  name               String
  sku                String       @unique
  price              Decimal?
  inventory_quantity Int
  option1_value      String?
  option2_value      String?
  option3_value      String?
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt
  product            Products     @relation(fields: [product_id], references: [id])
  cart_items         CartItems[]
  order_items        OrderItems[]
}

model Category {
  id            String     @id @default(uuid()) @db.Uuid
  name          String
  slug          String     @unique
  description   String?    @db.Text
  image_url     String?
  display_order Int        @default(0)
  parent_id     String?
  parent        Category?  @relation("CategoryToSubcategory", fields: [parent_id], references: [id], onDelete: SetNull)
  subcategories Category[] @relation("CategoryToSubcategory")
  products      Products[]
}

enum Role {
  CUSTOMER
  ADMIN
  MANAGER
}

model User {
  id            String        @id @default(uuid()) @db.Uuid
  email         String        @unique
  password_hash String
  first_name    String
  last_name     String
  role          Role
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  user_profile  UserProfile[]
  cart          Carts[]
  orders        Orders[]
  address       Address[]
  session       Session[]
}

model UserProfile {
  id            String   @id @default(uuid()) @db.Uuid
  user_id       String   @db.Uuid
  phone         String
  address_line1 String?
  address_line2 String?
  city          String?
  state         String?
  postal_code   String?
  country       String?
  avatar_url    String?
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id])
}

model Session {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String?  @db.Uuid
  user       User?    @relation(fields: [user_id], references: [id])
  token      String   @unique
  expires_at DateTime
  data       Json
  cart       Carts[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
